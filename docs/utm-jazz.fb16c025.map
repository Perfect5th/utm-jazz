{"version":3,"sources":["utm/directions.js","utm/utm.js","utm/index.js","index.js"],"names":["directions","UP","RIGHT","DOWN","LEFT","UTM","machineTable","tape","operationCount","x","y","state","parseInt","Object","keys","i","read","write","move","changeState","lastRead","toWrite","moveUp","moveRight","moveDown","moveLeft","length","newState","OUTPUT_CLASS","j","document","addEventListener","utm","tapeElement","element","getTape","reduce","acc","row","rowElement","createElement","textContent","toString","append","className","querySelector","begin"],"mappings":"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","file":"utm-jazz.fb16c025.map","sourceRoot":"..","sourcesContent":["export const directions = {\n  UP: 0,\n  RIGHT: 1,\n  DOWN: 2,\n  LEFT: 3\n};\n","import {directions} from './directions';\n\nexport default class UTM {\n  // REQUIRES plain Object machineTable of the shape\n  //          {\n  //            state: {\n  //              write: <symbol>,\n  //              move: <direction>,\n  //              state: <state>\n  //            },\n  //            ...\n  //          }\n  //          2D array tape\n  //          positive int operationCount\n  constructor(machineTable, tape, operationCount) {\n    this.x = 0;\n    this.y = 0;\n\n    this.machineTable = machineTable;\n    this.tape = tape;\n    this.operationCount = operationCount;\n\n    this.state = parseInt(Object.keys(machineTable)[0], 10);\n  }\n\n  // MODIFIES: this\n  // EFFECTS: performs a number of operations equal to operationCount\n  begin() {\n    for (let i = 0; i < this.operationCount; i++) {\n      this.read();\n      this.write();\n      this.move();\n      this.changeState();\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: reads the symbol that is currently under the tape.\n  read() {\n    this.lastRead = this.tape[this.y][this.x];\n  }\n\n  // MODIFIES: this\n  // EFFECTS: writes a symbol to the current tape location based on state.\n  write() {\n    const toWrite = this.machineTable[this.state][this.lastRead].write;\n\n    this.tape[this.y][this.x] = toWrite;\n  }\n\n  // MODIFIES: this\n  // EFFECTS: moves on the tape in the direction given by current state.\n  move() {\n    switch (this.machineTable[this.state][this.lastRead].move) {\n      case directions.UP:\n        return this.moveUp();\n      case directions.RIGHT:\n        return this.moveRight();\n      case directions.DOWN:\n        return this.moveDown();\n      case directions.LEFT:\n        return this.moveLeft();\n      default:\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: moves up on the tape, rolling over to the bottom.\n  moveUp() {\n    if (this.y === 0) {\n      this.y = this.tape.length - 1;\n    } else {\n      this.y--;\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: moves right on the tape, rolling over to the left.\n  moveRight() {\n    if (this.x === this.tape[0].length - 1) {\n      this.x = 0;\n    } else {\n      this.x++;\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: moves down on the tape, rolling over to the top.\n  moveDown() {\n    if (this.y === this.tape.length - 1) {\n      this.y = 0;\n    } else {\n      this.y++;\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: moves left on the tape, rolling over to the right.\n  moveLeft() {\n    if (this.x === 0) {\n      this.x = this.tape[0].length - 1;\n    } else {\n      this.x--;\n    }\n  }\n\n  // MODIFIES: this\n  // EFFECTS: changes to new state as specified by current state.\n  changeState() {\n    const newState = this.machineTable[this.state][this.lastRead].state;\n\n    this.state = parseInt(newState, 10);\n  }\n\n  // Getters\n  getState() {\n    return this.state;\n  }\n\n  getTape() {\n    return this.tape;\n  }\n}\n","export {default} from './utm';\nexport * from './directions';\n","import UTM, {directions} from './utm';\n\nconst OUTPUT_CLASS = 'tape-snapshot';\n\nconst tape = [];\n\n// Initialize the tap as 4 by 8, full of zeroes.\nfor (let i = 0; i < 4; i++) {\n  tape[i] = [];\n\n  for (let j = 0; j < 8; j++) {\n    tape[i][j] = 0;\n  }\n}\n\n// Once the DOM has loaded:\n// - create a utm object\n// - display the initial tape\n// - run the utm each time the button is pushed, then display tape\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Create a utm object with a machine table\n  const utm = new UTM({\n    0: {\n      0: {\n        write: 1,\n        move: directions.RIGHT,\n        state: 0\n      },\n      1: {\n        write: 2,\n        move: directions.DOWN,\n        state: 0\n      },\n      2: {\n        write: 0,\n        move: directions.LEFT,\n        state: 0\n      }\n    }\n  }, tape, 10);\n\n  // Function that displays the current state of the tap in an HTML div\n  const tapeElement = () => {\n    const element = utm.getTape().reduce((acc, row) => {\n      const rowElement = document.createElement('div');\n\n      rowElement.textContent = row.toString();\n      acc.append(rowElement);\n\n      return acc;\n    }, document.createElement('div'));\n\n    element.className = OUTPUT_CLASS;\n\n    return element;\n  };\n\n  // Run the utm every time the button is clicked, then display the new tape\n  // state\n  document.querySelector('#begin-button').addEventListener('click', () => {\n    utm.begin();\n\n    document.querySelector('#turing-tape').append(tapeElement());\n  });\n\n  // Display the initial tape state\n  document.querySelector('#turing-tape').append(tapeElement());\n});\n"]}